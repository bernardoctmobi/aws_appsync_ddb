AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  TableName:
    Type: String
    Default: Table
  ApiName:
    Type: String
    Default: ApiName
  ApiKeyExpiration:
    Type: Number

Resources:
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: PAY_PER_REQUEST
      TableName: !Ref TableName
      AttributeDefinitions:
        - AttributeName: "PK"
          AttributeType: "S"
        - AttributeName: "SK"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "PK"
          KeyType: "HASH"
        - AttributeName: "SK"
          KeyType: "RANGE"

  DDBTablePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - dynamodb:Query
              - dynamodb:GetItem
              - dynamodb:UpdateItem
              - dynamodb:PutItem
              - dynamodb:DeleteItem
            Resource:
              - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTable}

  AppSyncDDBRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - !Ref DDBTablePolicy
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  AppsyncCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - sts:AssumeRole
            Principal:
              Service:
                - appsync.amazonaws.com

  GraphQLApi:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Ref ApiName
      AuthenticationType: API_KEY
      LogConfig:
        CloudWatchLogsRoleArn: !GetAtt AppsyncCloudWatchRole.Arn
        FieldLogLevel: ALL

  GraphQLApiSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
        }
        type Book {
          PK: String!
          SK: String!
        }
        type Mutation {
          writeData(PK: String!, SK: String!): Book!
          updateData(PK: String!, SK: String!): Book
          deleteData(PK: String!, SK: String!): Book
        }
        type Query {
          readData(PK: String!, SK: String!): Book
          byAuthor(SK: String!): [Book]
        }

  GraphQLDataSource:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      Name: dynamoDB
      Type: AMAZON_DYNAMODB
      ServiceRoleArn: !GetAtt AppSyncDDBRole.Arn
      DynamoDBConfig:
        AwsRegion: !Sub ${AWS::Region}
        TableName: !Ref DynamoDBTable

  ReadDataResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Query
      FieldName: readData
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "GetItem",
          "key": {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.PK),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.SK),
          },
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  # ByAuthorResolver:
  #   Type: AWS::AppSync::Resolver
  #   DependsOn: GraphQLApiSchema
  #   Properties:
  #     ApiId: !GetAtt GraphQLApi.ApiId
  #     TypeName: Query
  #     FieldName: byAuthor
  #     DataSourceName: !GetAtt GraphQLDataSource.Name
  #     RequestMappingTemplate: >
  #       {
  #         "version": "2017-02-28",
  #         "operation": "Query",
  #         "query": {
  #           "expression": "SK = :SK",
  #           "expressionValues": {
  #             ":SK": $util.dynamodb.toDynamoDBJson($ctx.args.PK),
  #           }
  #         }
  #       }
  #     ResponseMappingTemplate: $util.toJson($context.result)

  WriteDataResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: writeData
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "PutItem",
          "key": {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.PK),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.SK)
          },
          "attributeValues": {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.PK),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.SK)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  UpdateDataResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      TypeName: Mutation
      FieldName: updateData
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "UpdateItem",
          "key": {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.input.PK),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.input.SK)
          },
          "update": {
            "expression": "SET Book.PK = :PK, Book.SK = :SK",
            "expressionValues": {
              ":PK": $util.dynamodb.toDynamoDBJson($ctx.args.PK),
              ":SK": $util.dynamodb.toDynamoDBJson($ctx.args.SK)
            }
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  DeleteDataResolver:
    Type: AWS::AppSync::Resolver
    DependsOn: GraphQLApiSchema
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
      FieldName: deleteData
      TypeName: Mutation
      DataSourceName: !GetAtt GraphQLDataSource.Name
      RequestMappingTemplate: >
        {
          "version": "2017-02-28",
          "operation": "DeleteItem",
          "key": {
            "PK": $util.dynamodb.toDynamoDBJson($ctx.args.input.PK),
            "SK": $util.dynamodb.toDynamoDBJson($ctx.args.input.SK)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  APIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt GraphQLApi.ApiId
